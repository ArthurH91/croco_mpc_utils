# Templated YAML file to setup an OCP using Crocoddyl

dt: 0.02                                             # OCP integration step 
N_h: 100                                             # Horizon length in nodes
maxiter: 100                                         # Max number of iterations in DDP
q0: [0.1, 0.7, 0., 0.7, -0.5, 1.5, 0.]               # Initial robot joint configuration
dq0: [0.,0.,0.,0.,0.,0.,0.]                          # Initial robot joint velocity
WHICH_PLOTS: ['ee']                                  # which plots to generate 

# Cost function composition (a.k.a which terms will be actually used in the OCP)
# to select from the list : 'stateReg', 'ctrlReg', 'ctrlRegGrav', 'stateLim', 'ctrlLim'
#                           'force', 'friction', 'translation', 'velocity', 'placement'
WHICH_COSTS: ['stateReg', 'ctrlRegGrav', 'translation', 'velocity'] 

# Cost terms weights, activations and references
 # 'stateReg' : state regularization  
stateRegWeights: [0., 0., 0., 0., 0., 0. ,0., 2., 2., 2., 2., 2., 2., 2.]
stateRegWeight: .1
stateRegWeightTerminal: 2.
stateRegRef: 'DEFAULT' # 'DEFAULT' = $([q0, dq0])

 # 'ctrlReg', 'ctrlRegGrav' : torque regularization 
ctrlRegGravWeights: [1., 1., 1., 1., 1., 1., 1.]
ctrlRegGravWeight: 0.01

 # 'translation' : end-effector frame translation 
frameTranslationWeights:  [1., 1., 1.]
frameTranslationWeight: 2.
frameTranslationWeightTerminal: 2. 
frameTranslationRef: [-0.5, -0.5, 0.7]
frameTranslationFrameName: 'contact' 

 # 'velocity' : end-effector frame velocity (translation + rotation)
frameVelocityWeights:  [1., 1., 1., 0., 0., 0.]
frameVelocityWeight: 0.1
frameVelocityWeightTerminal: 1
frameVelocityRef: [0., 0., 0., 0., 0., 0.]    
frameVelocityFrameName: 'contact' 
